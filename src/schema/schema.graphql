type Mutation {
  _: Boolean
}

type Query {
  _: Boolean
  getAllGamesBySteamId(args: GetAllGamesBySteamIdInput): AllGamesResponse
  getSteamUserDetails(args: GetSteamUserDetailsInput): SteamUserResponse
}

type Subscription {
  _: Boolean
}

type SteamGame {
  appId: ID!
  name: String
  playtimeLastTwoWeeks: Int
  playtimeTotal: Int
  logoUrl: String
  iconUrl: String
  hasCommunityVisibleStats: Boolean
}

type SteamUser {
  id: ID!
  steamId: String!
  username: String!
  avatar: String!
}

input GetAllGamesBySteamIdInput {
  steamId: String!
}

type AllGamesResponse {
  gameCount: Int
  totalPlaytime: Int
  totalPlaytimeTwoWeeks: Int
  games: [SteamGame]
}

input GetSteamUserDetailsInput {
  steamId: String!
}

type SteamUserResponse {
  personaName: String
  avatarUrl: String
  profileUrl: String
  personaState: Int
  realName: String
  primaryClanId: String
  timeCreated: Int
  locCountryCode: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}